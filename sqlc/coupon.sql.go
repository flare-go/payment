// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: coupon.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCoupon = `-- name: CreateCoupon :one
INSERT INTO coupons (
    id, name, amount_off, percent_off, currency, duration,
    duration_in_months, max_redemptions, times_redeemed, valid, redeem_by
) VALUES (
             $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
         )
RETURNING id, name, amount_off, percent_off, currency, duration, duration_in_months, max_redemptions, times_redeemed, valid, created_at, updated_at, redeem_by
`

type CreateCouponParams struct {
	ID               string             `json:"id"`
	Name             string             `json:"name"`
	AmountOff        int64              `json:"amountOff"`
	PercentOff       float64            `json:"percentOff"`
	Currency         string             `json:"currency"`
	Duration         string             `json:"duration"`
	DurationInMonths int32              `json:"durationInMonths"`
	MaxRedemptions   int32              `json:"maxRedemptions"`
	TimesRedeemed    int32              `json:"timesRedeemed"`
	Valid            bool               `json:"valid"`
	RedeemBy         pgtype.Timestamptz `json:"redeemBy"`
}

func (q *Queries) CreateCoupon(ctx context.Context, arg CreateCouponParams) (*Coupon, error) {
	row := q.db.QueryRow(ctx, createCoupon,
		arg.ID,
		arg.Name,
		arg.AmountOff,
		arg.PercentOff,
		arg.Currency,
		arg.Duration,
		arg.DurationInMonths,
		arg.MaxRedemptions,
		arg.TimesRedeemed,
		arg.Valid,
		arg.RedeemBy,
	)
	var i Coupon
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AmountOff,
		&i.PercentOff,
		&i.Currency,
		&i.Duration,
		&i.DurationInMonths,
		&i.MaxRedemptions,
		&i.TimesRedeemed,
		&i.Valid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RedeemBy,
	)
	return &i, err
}

const deleteCoupon = `-- name: DeleteCoupon :exec
DELETE FROM coupons WHERE id = $1
`

func (q *Queries) DeleteCoupon(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteCoupon, id)
	return err
}

const getCouponByID = `-- name: GetCouponByID :one
SELECT id, name, amount_off, percent_off, currency, duration, duration_in_months, max_redemptions, times_redeemed, valid, created_at, updated_at, redeem_by FROM coupons WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCouponByID(ctx context.Context, id string) (*Coupon, error) {
	row := q.db.QueryRow(ctx, getCouponByID, id)
	var i Coupon
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AmountOff,
		&i.PercentOff,
		&i.Currency,
		&i.Duration,
		&i.DurationInMonths,
		&i.MaxRedemptions,
		&i.TimesRedeemed,
		&i.Valid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RedeemBy,
	)
	return &i, err
}

const listCoupons = `-- name: ListCoupons :many
SELECT id, name, amount_off, percent_off, currency, duration, duration_in_months, max_redemptions, times_redeemed, valid, created_at, updated_at, redeem_by FROM coupons
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListCouponsParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListCoupons(ctx context.Context, arg ListCouponsParams) ([]*Coupon, error) {
	rows, err := q.db.Query(ctx, listCoupons, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Coupon{}
	for rows.Next() {
		var i Coupon
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AmountOff,
			&i.PercentOff,
			&i.Currency,
			&i.Duration,
			&i.DurationInMonths,
			&i.MaxRedemptions,
			&i.TimesRedeemed,
			&i.Valid,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RedeemBy,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCoupon = `-- name: UpdateCoupon :one
UPDATE coupons
SET name = $2,
    amount_off = $3,
    percent_off = $4,
    currency = $5,
    duration = $6,
    duration_in_months = $7,
    max_redemptions = $8,
    times_redeemed = $9,
    valid = $10,
    redeem_by = $11,
    updated_at = NOW()
WHERE id = $1
RETURNING id, name, amount_off, percent_off, currency, duration, duration_in_months, max_redemptions, times_redeemed, valid, created_at, updated_at, redeem_by
`

type UpdateCouponParams struct {
	ID               string             `json:"id"`
	Name             string             `json:"name"`
	AmountOff        int64              `json:"amountOff"`
	PercentOff       float64            `json:"percentOff"`
	Currency         string             `json:"currency"`
	Duration         string             `json:"duration"`
	DurationInMonths int32              `json:"durationInMonths"`
	MaxRedemptions   int32              `json:"maxRedemptions"`
	TimesRedeemed    int32              `json:"timesRedeemed"`
	Valid            bool               `json:"valid"`
	RedeemBy         pgtype.Timestamptz `json:"redeemBy"`
}

func (q *Queries) UpdateCoupon(ctx context.Context, arg UpdateCouponParams) (*Coupon, error) {
	row := q.db.QueryRow(ctx, updateCoupon,
		arg.ID,
		arg.Name,
		arg.AmountOff,
		arg.PercentOff,
		arg.Currency,
		arg.Duration,
		arg.DurationInMonths,
		arg.MaxRedemptions,
		arg.TimesRedeemed,
		arg.Valid,
		arg.RedeemBy,
	)
	var i Coupon
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AmountOff,
		&i.PercentOff,
		&i.Currency,
		&i.Duration,
		&i.DurationInMonths,
		&i.MaxRedemptions,
		&i.TimesRedeemed,
		&i.Valid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RedeemBy,
	)
	return &i, err
}

const upsertCoupon = `-- name: UpsertCoupon :exec
INSERT INTO coupons (
    id, name, amount_off, percent_off, currency, duration,
    duration_in_months, max_redemptions, times_redeemed, valid, redeem_by
) VALUES (
             $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
         )
ON CONFLICT (id)
    DO UPDATE SET
                  name = EXCLUDED.name,
                  amount_off = EXCLUDED.amount_off,
                  percent_off = EXCLUDED.percent_off,
                  currency = EXCLUDED.currency,
                  duration = EXCLUDED.duration,
                  duration_in_months = EXCLUDED.duration_in_months,
                  max_redemptions = EXCLUDED.max_redemptions,
                  times_redeemed = EXCLUDED.times_redeemed,
                  valid = EXCLUDED.valid,
                  redeem_by = EXCLUDED.redeem_by,
                  updated_at = NOW()
`

type UpsertCouponParams struct {
	ID               string             `json:"id"`
	Name             string             `json:"name"`
	AmountOff        int64              `json:"amountOff"`
	PercentOff       float64            `json:"percentOff"`
	Currency         string             `json:"currency"`
	Duration         string             `json:"duration"`
	DurationInMonths int32              `json:"durationInMonths"`
	MaxRedemptions   int32              `json:"maxRedemptions"`
	TimesRedeemed    int32              `json:"timesRedeemed"`
	Valid            bool               `json:"valid"`
	RedeemBy         pgtype.Timestamptz `json:"redeemBy"`
}

func (q *Queries) UpsertCoupon(ctx context.Context, arg UpsertCouponParams) error {
	_, err := q.db.Exec(ctx, upsertCoupon,
		arg.ID,
		arg.Name,
		arg.AmountOff,
		arg.PercentOff,
		arg.Currency,
		arg.Duration,
		arg.DurationInMonths,
		arg.MaxRedemptions,
		arg.TimesRedeemed,
		arg.Valid,
		arg.RedeemBy,
	)
	return err
}
