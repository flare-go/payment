// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: disputes.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const closeDispute = `-- name: CloseDispute :exec
UPDATE disputes
SET status = 'lost', updated_at = $2
WHERE id = $1
`

type CloseDisputeParams struct {
	ID        string             `json:"id"`
	UpdatedAt pgtype.Timestamptz `json:"updatedAt"`
}

func (q *Queries) CloseDispute(ctx context.Context, arg CloseDisputeParams) error {
	_, err := q.db.Exec(ctx, closeDispute, arg.ID, arg.UpdatedAt)
	return err
}

const createDispute = `-- name: CreateDispute :exec
INSERT INTO disputes (
    id, charge_id, amount, currency, status, reason, evidence_due_by, created_at, updated_at
) VALUES (
             $1, $2, $3, $4, $5, $6, $7, $8, $9
         )
`

type CreateDisputeParams struct {
	ID            string             `json:"id"`
	ChargeID      string             `json:"chargeId"`
	Amount        float64            `json:"amount"`
	Currency      Currency           `json:"currency"`
	Status        DisputeStatus      `json:"status"`
	Reason        DisputeReason      `json:"reason"`
	EvidenceDueBy pgtype.Timestamptz `json:"evidenceDueBy"`
	CreatedAt     pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt     pgtype.Timestamptz `json:"updatedAt"`
}

func (q *Queries) CreateDispute(ctx context.Context, arg CreateDisputeParams) error {
	_, err := q.db.Exec(ctx, createDispute,
		arg.ID,
		arg.ChargeID,
		arg.Amount,
		arg.Currency,
		arg.Status,
		arg.Reason,
		arg.EvidenceDueBy,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteDispute = `-- name: DeleteDispute :exec
DELETE FROM disputes WHERE id = $1
`

func (q *Queries) DeleteDispute(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteDispute, id)
	return err
}

const getDisputeByID = `-- name: GetDisputeByID :one
SELECT id, charge_id, amount, currency, status, reason, evidence_due_by, created_at, updated_at
FROM disputes
WHERE id = $1
`

func (q *Queries) GetDisputeByID(ctx context.Context, id string) (*Dispute, error) {
	row := q.db.QueryRow(ctx, getDisputeByID, id)
	var i Dispute
	err := row.Scan(
		&i.ID,
		&i.ChargeID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.Reason,
		&i.EvidenceDueBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateDispute = `-- name: UpdateDispute :exec
UPDATE disputes
SET charge_id = $2, amount = $3, currency = $4, status = $5, reason = $6, evidence_due_by = $7, updated_at = $8
WHERE id = $1
`

type UpdateDisputeParams struct {
	ID            string             `json:"id"`
	ChargeID      string             `json:"chargeId"`
	Amount        float64            `json:"amount"`
	Currency      Currency           `json:"currency"`
	Status        DisputeStatus      `json:"status"`
	Reason        DisputeReason      `json:"reason"`
	EvidenceDueBy pgtype.Timestamptz `json:"evidenceDueBy"`
	UpdatedAt     pgtype.Timestamptz `json:"updatedAt"`
}

func (q *Queries) UpdateDispute(ctx context.Context, arg UpdateDisputeParams) error {
	_, err := q.db.Exec(ctx, updateDispute,
		arg.ID,
		arg.ChargeID,
		arg.Amount,
		arg.Currency,
		arg.Status,
		arg.Reason,
		arg.EvidenceDueBy,
		arg.UpdatedAt,
	)
	return err
}

const upsertDispute = `-- name: UpsertDispute :exec
INSERT INTO disputes (
    id,
    charge_id,
    amount,
    currency,
    status,
    reason,
    evidence_due_by
) VALUES (
             $1, $2, $3, $4, $5, $6, $7
         )
ON CONFLICT (id)
    DO UPDATE SET
                  charge_id = EXCLUDED.charge_id,
                  amount = EXCLUDED.amount,
                  currency = EXCLUDED.currency,
                  status = EXCLUDED.status,
                  reason = EXCLUDED.reason,
                  evidence_due_by = EXCLUDED.evidence_due_by,
                  updated_at = NOW()
`

type UpsertDisputeParams struct {
	ID            string             `json:"id"`
	ChargeID      string             `json:"chargeId"`
	Amount        float64            `json:"amount"`
	Currency      Currency           `json:"currency"`
	Status        DisputeStatus      `json:"status"`
	Reason        DisputeReason      `json:"reason"`
	EvidenceDueBy pgtype.Timestamptz `json:"evidenceDueBy"`
}

func (q *Queries) UpsertDispute(ctx context.Context, arg UpsertDisputeParams) error {
	_, err := q.db.Exec(ctx, upsertDispute,
		arg.ID,
		arg.ChargeID,
		arg.Amount,
		arg.Currency,
		arg.Status,
		arg.Reason,
		arg.EvidenceDueBy,
	)
	return err
}
