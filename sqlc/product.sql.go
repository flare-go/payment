// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: product.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
    name,
    description,
    active,
    metadata,
    stripe_id
) VALUES (
             $1, $2, $3, $4, $5
         )
RETURNING id, created_at, updated_at
`

type CreateProductParams struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
	Active      bool    `json:"active"`
	Metadata    []byte  `json:"metadata"`
	StripeID    string  `json:"stripeId"`
}

type CreateProductRow struct {
	ID        uint64             `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt pgtype.Timestamptz `json:"updatedAt"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (*CreateProductRow, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.Name,
		arg.Description,
		arg.Active,
		arg.Metadata,
		arg.StripeID,
	)
	var i CreateProductRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return &i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id uint64) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, name, description, active, metadata, stripe_id, created_at, updated_at
FROM products
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id uint64) (*Product, error) {
	row := q.db.QueryRow(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Active,
		&i.Metadata,
		&i.StripeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, name, description, active, metadata, stripe_id, created_at, updated_at
FROM products
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListProductsParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]*Product, error) {
	rows, err := q.db.Query(ctx, listProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Active,
			&i.Metadata,
			&i.StripeID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET name = $2,
    description = $3,
    active = $4,
    metadata = $5,
    stripe_id = $6,
    updated_at = NOW()
WHERE id = $1
RETURNING created_at, updated_at
`

type UpdateProductParams struct {
	ID          uint64  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description"`
	Active      bool    `json:"active"`
	Metadata    []byte  `json:"metadata"`
	StripeID    string  `json:"stripeId"`
}

type UpdateProductRow struct {
	CreatedAt pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt pgtype.Timestamptz `json:"updatedAt"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (*UpdateProductRow, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Active,
		arg.Metadata,
		arg.StripeID,
	)
	var i UpdateProductRow
	err := row.Scan(&i.CreatedAt, &i.UpdatedAt)
	return &i, err
}
