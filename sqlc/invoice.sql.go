// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: invoice.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createInvoice = `-- name: CreateInvoice :one
INSERT INTO invoices (
    customer_id,
    subscription_id,
    status,
    currency,
    amount_due,
    amount_paid,
    amount_remaining,
    due_date,
    stripe_id
) VALUES (
             $1, $2, $3, $4, $5, $6, $7, $8, $9
         )
RETURNING id, customer_id, subscription_id, status, currency, amount_due, amount_paid, amount_remaining, due_date, paid_at, stripe_id, created_at, updated_at
`

type CreateInvoiceParams struct {
	CustomerID      int32              `json:"customerId"`
	SubscriptionID  *int32             `json:"subscriptionId"`
	Status          InvoiceStatus      `json:"status"`
	Currency        Currency           `json:"currency"`
	AmountDue       int64              `json:"amountDue"`
	AmountPaid      int64              `json:"amountPaid"`
	AmountRemaining int64              `json:"amountRemaining"`
	DueDate         pgtype.Timestamptz `json:"dueDate"`
	StripeID        string             `json:"stripeId"`
}

func (q *Queries) CreateInvoice(ctx context.Context, arg CreateInvoiceParams) (*Invoice, error) {
	row := q.db.QueryRow(ctx, createInvoice,
		arg.CustomerID,
		arg.SubscriptionID,
		arg.Status,
		arg.Currency,
		arg.AmountDue,
		arg.AmountPaid,
		arg.AmountRemaining,
		arg.DueDate,
		arg.StripeID,
	)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.SubscriptionID,
		&i.Status,
		&i.Currency,
		&i.AmountDue,
		&i.AmountPaid,
		&i.AmountRemaining,
		&i.DueDate,
		&i.PaidAt,
		&i.StripeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getInvoice = `-- name: GetInvoice :one
SELECT id, customer_id, subscription_id, status, currency, amount_due, amount_paid, amount_remaining, due_date, paid_at, stripe_id, created_at, updated_at
FROM invoices
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetInvoice(ctx context.Context, id uint32) (*Invoice, error) {
	row := q.db.QueryRow(ctx, getInvoice, id)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.SubscriptionID,
		&i.Status,
		&i.Currency,
		&i.AmountDue,
		&i.AmountPaid,
		&i.AmountRemaining,
		&i.DueDate,
		&i.PaidAt,
		&i.StripeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const listInvoices = `-- name: ListInvoices :many
SELECT id, customer_id, subscription_id, status, currency, amount_due, amount_paid, amount_remaining, due_date, paid_at, stripe_id, created_at, updated_at
FROM invoices
WHERE customer_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListInvoicesParams struct {
	CustomerID int32 `json:"customerId"`
	Limit      int64 `json:"limit"`
	Offset     int64 `json:"offset"`
}

func (q *Queries) ListInvoices(ctx context.Context, arg ListInvoicesParams) ([]*Invoice, error) {
	rows, err := q.db.Query(ctx, listInvoices, arg.CustomerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Invoice{}
	for rows.Next() {
		var i Invoice
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.SubscriptionID,
			&i.Status,
			&i.Currency,
			&i.AmountDue,
			&i.AmountPaid,
			&i.AmountRemaining,
			&i.DueDate,
			&i.PaidAt,
			&i.StripeID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInvoice = `-- name: UpdateInvoice :one
UPDATE invoices
SET status = $2,
    amount_paid = $3,
    amount_remaining = $4,
    paid_at = $5,
    stripe_id = $6,
    updated_at = NOW()
WHERE id = $1
RETURNING id, customer_id, subscription_id, status, currency, amount_due, amount_paid, amount_remaining, due_date, paid_at, stripe_id, created_at, updated_at
`

type UpdateInvoiceParams struct {
	ID              uint32             `json:"id"`
	Status          InvoiceStatus      `json:"status"`
	AmountPaid      int64              `json:"amountPaid"`
	AmountRemaining int64              `json:"amountRemaining"`
	PaidAt          pgtype.Timestamptz `json:"paidAt"`
	StripeID        string             `json:"stripeId"`
}

func (q *Queries) UpdateInvoice(ctx context.Context, arg UpdateInvoiceParams) (*Invoice, error) {
	row := q.db.QueryRow(ctx, updateInvoice,
		arg.ID,
		arg.Status,
		arg.AmountPaid,
		arg.AmountRemaining,
		arg.PaidAt,
		arg.StripeID,
	)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.SubscriptionID,
		&i.Status,
		&i.Currency,
		&i.AmountDue,
		&i.AmountPaid,
		&i.AmountRemaining,
		&i.DueDate,
		&i.PaidAt,
		&i.StripeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
