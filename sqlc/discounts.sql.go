// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: discounts.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDiscount = `-- name: CreateDiscount :one
INSERT INTO discounts (
    id, customer_id, coupon_id, start, "end"
) VALUES (
             $1, $2, $3, $4, $5
         )
RETURNING id, customer_id, coupon_id, start, "end", created_at, updated_at
`

type CreateDiscountParams struct {
	ID         string             `json:"id"`
	CustomerID string             `json:"customerId"`
	CouponID   string             `json:"couponId"`
	Start      pgtype.Timestamptz `json:"start"`
	End        pgtype.Timestamptz `json:"end"`
}

func (q *Queries) CreateDiscount(ctx context.Context, arg CreateDiscountParams) (*Discount, error) {
	row := q.db.QueryRow(ctx, createDiscount,
		arg.ID,
		arg.CustomerID,
		arg.CouponID,
		arg.Start,
		arg.End,
	)
	var i Discount
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.CouponID,
		&i.Start,
		&i.End,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteDiscount = `-- name: DeleteDiscount :exec
DELETE FROM discounts
WHERE id = $1
`

func (q *Queries) DeleteDiscount(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteDiscount, id)
	return err
}

const getDiscountByID = `-- name: GetDiscountByID :one
SELECT id, customer_id, coupon_id, start, "end", created_at, updated_at FROM discounts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDiscountByID(ctx context.Context, id string) (*Discount, error) {
	row := q.db.QueryRow(ctx, getDiscountByID, id)
	var i Discount
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.CouponID,
		&i.Start,
		&i.End,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const listDiscounts = `-- name: ListDiscounts :many
SELECT id, customer_id, coupon_id, start, "end", created_at, updated_at FROM discounts
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListDiscountsParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListDiscounts(ctx context.Context, arg ListDiscountsParams) ([]*Discount, error) {
	rows, err := q.db.Query(ctx, listDiscounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Discount{}
	for rows.Next() {
		var i Discount
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.CouponID,
			&i.Start,
			&i.End,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDiscountsByCustomerID = `-- name: ListDiscountsByCustomerID :many
SELECT id, customer_id, coupon_id, start, "end", created_at, updated_at FROM discounts
WHERE customer_id = $1
ORDER BY id
LIMIT $2 OFFSET $3
`

type ListDiscountsByCustomerIDParams struct {
	CustomerID string `json:"customerId"`
	Limit      int64  `json:"limit"`
	Offset     int64  `json:"offset"`
}

func (q *Queries) ListDiscountsByCustomerID(ctx context.Context, arg ListDiscountsByCustomerIDParams) ([]*Discount, error) {
	rows, err := q.db.Query(ctx, listDiscountsByCustomerID, arg.CustomerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Discount{}
	for rows.Next() {
		var i Discount
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.CouponID,
			&i.Start,
			&i.End,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDiscount = `-- name: UpdateDiscount :one
UPDATE discounts
SET customer_id = $2,
    coupon_id = $3,
    start = $4,
    "end" = $5,
    updated_at = NOW()
WHERE id = $1
RETURNING id, customer_id, coupon_id, start, "end", created_at, updated_at
`

type UpdateDiscountParams struct {
	ID         string             `json:"id"`
	CustomerID string             `json:"customerId"`
	CouponID   string             `json:"couponId"`
	Start      pgtype.Timestamptz `json:"start"`
	End        pgtype.Timestamptz `json:"end"`
}

func (q *Queries) UpdateDiscount(ctx context.Context, arg UpdateDiscountParams) (*Discount, error) {
	row := q.db.QueryRow(ctx, updateDiscount,
		arg.ID,
		arg.CustomerID,
		arg.CouponID,
		arg.Start,
		arg.End,
	)
	var i Discount
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.CouponID,
		&i.Start,
		&i.End,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const upsertDiscount = `-- name: UpsertDiscount :exec
INSERT INTO discounts (
    id, customer_id, coupon_id, start, "end"
) VALUES (
             $1, $2, $3, $4, $5
         )
ON CONFLICT (id)
    DO UPDATE SET
                  customer_id = EXCLUDED.customer_id,
                  coupon_id = EXCLUDED.coupon_id,
                  start = EXCLUDED.start,
                  "end" = EXCLUDED."end",
                  updated_at = NOW()
`

type UpsertDiscountParams struct {
	ID         string             `json:"id"`
	CustomerID string             `json:"customerId"`
	CouponID   string             `json:"couponId"`
	Start      pgtype.Timestamptz `json:"start"`
	End        pgtype.Timestamptz `json:"end"`
}

func (q *Queries) UpsertDiscount(ctx context.Context, arg UpsertDiscountParams) error {
	_, err := q.db.Exec(ctx, upsertDiscount,
		arg.ID,
		arg.CustomerID,
		arg.CouponID,
		arg.Start,
		arg.End,
	)
	return err
}
