// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: customer.sql

package sqlc

import (
	"context"
)

const createCustomer = `-- name: CreateCustomer :exec
INSERT INTO customers (
    user_id,
    balance,
    stripe_id
) VALUES (
             $1, $2, $3
         )
`

type CreateCustomerParams struct {
	UserID   uint64 `json:"userId"`
	Balance  int64  `json:"balance"`
	StripeID string `json:"stripeId"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) error {
	_, err := q.db.Exec(ctx, createCustomer, arg.UserID, arg.Balance, arg.StripeID)
	return err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customers WHERE id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, id uint64) error {
	_, err := q.db.Exec(ctx, deleteCustomer, id)
	return err
}

const getCustomer = `-- name: GetCustomer :one

SELECT id, user_id, balance, stripe_id, created_at, updated_at
FROM customers
WHERE id = $1 LIMIT 1
`

// RETURNING id, user_id, balance, stripe_id, created_at, updated_at;
func (q *Queries) GetCustomer(ctx context.Context, id uint64) (*Customer, error) {
	row := q.db.QueryRow(ctx, getCustomer, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.StripeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const listCustomers = `-- name: ListCustomers :many
SELECT id, user_id, balance, stripe_id, created_at, updated_at
FROM customers
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListCustomersParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListCustomers(ctx context.Context, arg ListCustomersParams) ([]*Customer, error) {
	rows, err := q.db.Query(ctx, listCustomers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Balance,
			&i.StripeID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomer = `-- name: UpdateCustomer :exec
UPDATE customers
SET balance = $2,
    stripe_id = $3,
    updated_at = NOW()
WHERE id = $1
`

type UpdateCustomerParams struct {
	ID       uint64 `json:"id"`
	Balance  int64  `json:"balance"`
	StripeID string `json:"stripeId"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) error {
	_, err := q.db.Exec(ctx, updateCustomer, arg.ID, arg.Balance, arg.StripeID)
	return err
}

const updateCustomerBalance = `-- name: UpdateCustomerBalance :exec
UPDATE customers
SET balance = balance + $2,
    updated_at = NOW()
WHERE id = $1
`

type UpdateCustomerBalanceParams struct {
	ID      uint64 `json:"id"`
	Balance int64  `json:"balance"`
}

func (q *Queries) UpdateCustomerBalance(ctx context.Context, arg UpdateCustomerBalanceParams) error {
	_, err := q.db.Exec(ctx, updateCustomerBalance, arg.ID, arg.Balance)
	return err
}
